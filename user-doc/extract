#! /bin/bash
rm -rf automatic
mkdir automatic

# Check for files that register actions with no documentation
rm errors
for file in ../src/*/*.cpp
do
  nreg=`grep "PLUMED_REGISTER_ACTION" $file | wc -l | awk '{print $1}'`
  if [ $nreg -gt 0 ] ; then
       ndoc=`grep PLUMEDOC $file | wc -l | awk '{print $1}'`
       if [ $ndoc -eq 0 ] ; then
          echo The following file registered an action but provided no documentation: $file >> errors
       fi
  fi 
done

# Create the list of codes that plumed works with from the set of available patches
for file in ../patches/*.config
do
   echo "- $file" | sed -e 's/.config//' | sed -e 's/..\/patches\///' >> automatic/codes.list
done

## Check for utilities that register actions with no documentation
#for file in ../utilities/*.cpp
#do
#  ndoc=`grep PLUMEDOC $file | grep TOOL | wc -l | awk '{print $1}'`
#  if [ $ndoc -eq 0 ] ; then
#     echo The following utility has been provided without documentation: $file >> errors
#  fi
#done

# Generate all the documentation pages from comments
cat ../*/*/*cpp |
awk 'BEGIN{gfile="automatic/GLOSSARY1.list"; dfile="automatic/DICTIONARY1.list"; }{
  if($1=="//+ENDPLUMEDOC"){
     inside=0;
     print "*/" >output
  }
  if(inside>=2 && NF==0){
     print "</td> </tr>" > lfile
     if(inside==2){ printf "</td> </tr>\n" > gfile; }
     if(inside==3){ printf "</td> </tr>\n" > dfile; }
     inside=1
  }
  if(inside==1 && $1!="/*" && $1!="*/") print $0 >output
  if(inside>=2 && $1!="/*" && $1!="*/" ){
     print $0 > output
     print $0 > lfile
     if(inside==2){ printf "%s", $0 > gfile; }
     if(inside==3){ printf "%s", $0 > dfile; }
  }
  if($1=="//+PLUMEDOC"){
    if( $2=="TOPOLOGY" || $2=="COLVAR" || $2=="MCOLVAR" || $2=="FUNCTION" || $2=="ANALYSIS" || $2=="BIAS" || $2=="GENERIC" || $2=="VATOM" || $2=="TOOLS" ){
      lfile="automatic/"$2".list"
      
      print "<tr> <td width=5%> \\subpage ", $3,"</td> <td>" > lfile
#       printf "<tr> <td width=5%> \\ref %s </td><td> %s </td><td>",$3, $2 > gfile
      printf "<tr> <td width=%s> \\ref %s </td><td> %s </td><td>","5%",$3, $2 > gfile

      if(output!="")close(output);
      output="automatic/"$3".tmp";
      print "/**" > output
      print "\\page "$3 > output
      print "\\section "$3 >output
      inside=2;
    } else if ( $2=="INTERNAL" ){
      if(output!="")close(output);

      printf "<tr> <td width=%s> \\subpage %s </td><td> %s </td><td>","5%",$3, $2 > dfile

      output="automatic/"$3".txt";
      lfile="automatic/"$3".txt";
      print "/**" > output
      print "\\page "$3 > output
      print "\\section "$3 > output
      inside=3;
    }
  }
}'

# Now put the glossary in alphabetical order
sort automatic/GLOSSARY1.list > automatic/GLOSSARY.list 
sort automatic/DICTIONARY1.list > automatic/DICTIONARY.list

# Generate all the documentation from keywords
source ../sourceme.sh
for file in automatic/*.tmp
do
  foundexample=`grep "\par Examples" $file | wc -l | awk '{print $1}'`
  flag=`echo $file | sed -e 's/.tmp//g' | sed -e 's/automatic\///g'`
  ../src/lib/plumed manual --action=$flag > automatic/$flag.man 2> shit
  rm shit 
  check=`wc -l automatic/$flag.man | awk '{print $1}'`
  if [ $check -eq 0 ] ; then 
     echo Full manual for action $flag will not be generated as you are building the manual from a code where this action was not compiled >> errors
  elif [ $foundexample -eq 0 ] 
  then
    echo There are no examples inside documentation for action: $flag >> errors
  fi
  cat automatic/$flag.tmp |
    { 
     while read -r LINE ;
      do
        if [ "$LINE" = "\par Examples" ]
        then
          cat automatic/$flag.man 
          echo -E "$LINE"
        else
          echo -E "$LINE"
        fi
      done
    } > automatic/$flag.txt
done

for file in Bias Colvar Functions Installation Intro Analysis Glossary
do

cat $file.txt |
{
 while read -r LINE ;
  do
  if [ "$LINE" = "@COLVAR@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/COLVAR.list
    echo "</table>"
  elif [ "$LINE" = "@MCOLVAR@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/MCOLVAR.list
    echo "</table>"
  elif [ "$LINE" = "@ANALYSIS@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/ANALYSIS.list
    echo "</table>"
  elif [ "$LINE" = "@BIAS@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/BIAS.list
    echo "</table>"
  elif [ "$LINE" = "@GLOSSARY@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/GLOSSARY.list
    echo "</table>"
  elif [ "$LINE" = "@DICTIONARY@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/DICTIONARY.list
    echo "</table>"
  elif [ "$LINE" = "@FUNCTION@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/FUNCTION.list
    echo "</table>"
  elif [ "$LINE" = "@TOPOLOGY@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/TOPOLOGY.list
    echo "</table>"
  elif [ "$LINE" = "@VATOM@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/VATOM.list
    echo "</table>"
  elif [ "$LINE" = "@TOOLS@" ]
  then
    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/TOOLS.list
    echo "</table>" 
  elif [ "$LINE" = "@CODES@" ]
  then
#    echo "<table align=center frame=void width=95%% cellpadding=5%%>"
    cat automatic/codes.list
#    echo "</table>"
  else
    echo -E "$LINE"
  fi
   done
} > ${file}PP.txt
done
